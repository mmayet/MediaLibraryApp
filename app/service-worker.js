// This file is intentionally without code.
// It's present so that service worker registration will work when serving from the 'app' directory.
// The version of service-worker.js that's present in the 'dist' directory is automatically
// generated by the 'generate-service-worker' gulp task, and contains code to precache resources.
console.log('Started', self);
importScripts('/~mmayet/music/serviceworker-cache-polyfill.js');
var CACHE_VERSION = 1;
var CURRENT_CACHES = {
    mycache: 'my-cache-v-' + CACHE_VERSION
};

self.addEventListener('install', function(event) {
    var urlsToCache = [
        '/~mmayet/music/app/',
        '/~mmayet/music/app/index.html',
        '/~mmayet/music/app/styles/audioplayer.css',
        '/~mmayet/music/app/styles/main.css',
        '/~mmayet/music/app/styles/nprogress.css',
        '/~mmayet/music/app/scripts/audioplayer.js',
        '/~mmayet/music/app/scripts/jsmediatags.min.js',
        '/~mmayet/music/app/scripts/main.js',
        '/~mmayet/music/app/scripts/nprogress.js',
        '/~mmayet/music/app/scripts/sw/runtime-caching.js'
    ];

    event.waitUntil(
        caches.open(CURRENT_CACHES['mycache']).then(function(cache) {
            cache.addAll(urlsToCache.map(function(urlToCache) {
                return new Request(urlToCache, {
                    mode: 'no-cors'
                });
            })).then(function() {
                console.log('All urls have been fetched and cached.');
            });
        }).catch(function(error) {
            console.error('Cache failed:', error);
        })
    );
    self.skipWaiting();
    console.log('Installed', event);
});
self.addEventListener('activate', function(event) {
    // Delete all caches that aren't named in CURRENT_CACHES.
    var expectedCacheNames = Object.keys(CURRENT_CACHES).map(function(key) {
        return CURRENT_CACHES[key];
    });

    event.waitUntil(
        caches.keys().then(function(cacheNames) {
            return Promise.all(
                cacheNames.map(function(cacheName) {
                    if (expectedCacheNames.indexOf(cacheName) == -1) {
                        console.log('Deleted out of date cache:', cacheName);
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
    console.log('Activated', event);
});
self.addEventListener('push', function(event) {
    console.log('Push message received', event);
    // TODO
});
self.addEventListener('fetch', function(event) {
    console.log('Fetch event:', event.request.url);

    event.respondWith(
        caches.match(event.request).then(function(response) {
            if (response) {
                console.log('Found in cache:', response);
                return response;
            }

            console.log('No response found in cache. Fetch from network...');

            var fetchRequest = event.request.clone();

            return fetch(fetchRequest).then(
                function(response) {
                    if (!response || response.status !== 200 || response.type !== 'basic') {
                        return response;
                    }

                    var responseToCache = response.clone();

                    caches.open(CURRENT_CACHES['mycache']).then(function(cache) {
                        var cacheRequest = event.request.clone();
                        console.log("Add to cache:" + cacheRequest);
                        cache.put(cacheRequest, responseToCache);
                    });

                    return response;
                });

        })
    );
});